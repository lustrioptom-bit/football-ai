# bot.py
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading
import json
import requests
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta
import logging
import time  # ‚úÖ –≠—Ç–æ –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ!

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8304903389:AAGRyWP4Ez97aoA-yLTYzYLQHuKbutTfcy4"
MAIN_CHAT_ID = "8431596511"
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏–≥ ===
def load_data():
    leagues = {
        'E0': 'Premier League',
        'D1': 'Bundesliga',
        'I1': 'Serie A',
        'F1': 'Ligue 1',
        'SP1': 'La Liga'
    }
    all_matches = []
    for code, name in leagues.items():
        url = f"https://www.football-data.co.uk/mmz4281/2324/{code}.csv"
        try:
            df = pd.read_csv(StringIO(requests.get(url).text))
            df['League'] = name
            df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')
            all_matches.append(df)
            logger.info(f"‚úÖ {name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå {name}: {e}")
    return pd.concat(all_matches, ignore_index=True) if all_matches else pd.DataFrame()

# === –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞ ===
def predict_match(team1, team2, df):
    home_games = df[df['HomeTeam'] == team1]
    away_games = df[df['AwayTeam'] == team2]
    xG1 = home_games['FTHG'].mean() if len(home_games) > 0 else 1.5
    xG2 = away_games['FTAG'].mean() if len(away_games) > 0 else 1.2
    if xG1 > xG2 + 0.3:
        result = f"–ü–æ–±–µ–¥–∞ {team1}"
    elif xG2 > xG1 + 0.3:
        result = f"–ü–æ–±–µ–¥–∞ {team2}"
    else:
        result = "–í–µ—Ä–æ—è—Ç–Ω–∞ –Ω–∏—á—å—è"
    return {
        'xG1': round(xG1, 2),
        'xG2': round(xG2, 2),
        'score': f"{xG1:.1f} : {xG2:.1f}",
        'result': result
    }

# === ROI-—Ç—Ä–µ–∫–µ—Ä ===
class ROI_Tracker:
    def __init__(self):
        self.total_bet = 0
        self.profit = 0
        self.wins = 0
        self.total = 0

    def place_bet(self, amount=10, win_prob=0.5, odds=1.8):
        self.total += 1
        self.total_bet += amount
        win = True  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
        if win:
            self.profit += amount * (odds - 1)
            self.wins += 1
        else:
            self.profit -= amount

    def report(self):
        accuracy = self.wins / self.total if self.total else 0
        roi = (self.profit / self.total_bet) * 100 if self.total_bet else 0
        return {
            'total': self.total,
            'profit': round(self.profit, 1),
            'accuracy': round(accuracy * 100, 1),
            'roi': round(roi, 1)
        }

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ===
def send_message(chat_id, text, parse_mode=None):
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        requests.post(BASE_URL + "sendMessage", data=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
def get_updates(offset=None):
    url = BASE_URL + "getUpdates"
    params = {"timeout": 30}
    if offset:
        params["offset"] = offset
    try:
        response = requests.get(url, params=params, timeout=35)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"ok": False}

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ===
def run_bot():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    offset = None
    df = load_data()
    roi_tracker = ROI_Tracker()

    while True:
        try:
            data = get_updates(offset)
            if data.get("ok") and data.get("result"):
                for item in data["result"]:
                    offset = item["update_id"] + 1
                    msg = item["message"]
                    chat_id = msg["chat"]["id"]
                    text = msg.get("text", "")

                    if text == "/start":
                        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π:\n‚Ä¢ /predict Arsenal Man City\n‚Ä¢ /roi ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

                    elif text.startswith("/predict"):
                        args = text.split()[1:]
                        if len(args) < 2:
                            send_message(chat_id, "‚ùå /predict –ö–æ–º–∞–Ω–¥–∞1 –ö–æ–º–∞–Ω–¥–∞2")
                            continue
                        team1 = args[0]
                        team2 = " ".join(args[1:])
                        if df.empty:
                            send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            pred = predict_match(team1, team2, df)
                            message = (
                                f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑: {team1} vs {team2}*\n\n"
                                f"üéØ xG: {pred['xG1']} ‚Äî {pred['xG2']}\n"
                                f"üìå –°—á—ë—Ç: {pred['score']}\n"
                                f"üèÜ –ò—Å—Ö–æ–¥: *{pred['result']}*"
                            )
                            send_message(chat_id, message, parse_mode='Markdown')

                    elif text == "/roi":
                        roi_tracker.place_bet()
                        report = roi_tracker.report()
                        message = (
                            f"üìä *–û—Ç—á—ë—Ç –ø–æ —Å—Ç–∞–≤–∫–∞–º*\n"
                            f"‚Ä¢ –°—Ç–∞–≤–æ–∫: {report['total']}\n"
                            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {report['profit']} —É.–µ.\n"
                            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {report['accuracy']}%\n"
                            f"‚Ä¢ ROI: {report['roi']}%"
                        )
                        send_message(chat_id, message, parse_mode='Markdown')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if datetime.now().minute % 5 == 0:
                time.sleep(60)
            else:
                time.sleep(30)

        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.end_headers()
        response = """
        <h1>‚öΩ AI Football Analyst ‚Äî –†–∞–±–æ—Ç–∞–µ—Ç!</h1>
        <p>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ ROI –∞–∫—Ç–∏–≤–Ω—ã.</p>
        <p>–ü—Ä–æ–≤–µ—Ä—å Telegram-–±–æ—Ç–∞: <a href="https://t.me/Iipredictirbot" target="_blank">@Iipredictirbot</a></p>
        """
        self.wfile.write(response.encode("utf-8"))

def run_web():
    port = int("10000")
    server = HTTPServer(('', port), Handler)
    logger.info(f"üåç –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±–∞ –≤ –ø–æ—Ç–æ–∫–∞—Ö ===
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
    web_thread = threading.Thread(target=run_web, daemon=True)
    web_thread.start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    run_bot()
