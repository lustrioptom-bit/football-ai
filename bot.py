# bot.py
from config import TOKEN, MAIN_CHAT_ID
import requests
import time
import logging
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏–≥ ===
def load_data():
    leagues = {
        'E0': 'Premier League',
        'D1': 'Bundesliga',
        'I1': 'Serie A',
        'F1': 'Ligue 1',
        'SP1': 'La Liga'
    }
    all_matches = []

    for code, name in leagues.items():
        url = f"https://www.football-data.co.uk/mmz4281/2324/{code}.csv"
        try:
            response = requests.get(url, timeout=10)
            df = pd.read_csv(StringIO(response.text))
            df['League'] = name
            df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')
            all_matches.append(df)
            logger.info(f"‚úÖ {name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå {name}: {e}")
    
    return pd.concat(all_matches, ignore_index=True) if all_matches else pd.DataFrame()

# === –¢–∞–±–ª–∏—Ü–∞ –ª–∏–≥–∏ ===
def get_league_table(df, league_name):
    league_df = df[df['League'] == league_name]
    table = {}
    for _, row in league_df.iterrows():
        h, a = row['HomeTeam'], row['AwayTeam']
        for team, is_home in [(h, True), (a, False)]:
            if team not in table:
                table[team] = {'–ò': 0, '–í': 0, '–ù': 0, '–ü': 0, '–†–ì': 0, '–û': 0}
            table[team]['–ò'] += 1
            if is_home:
                if row['FTR'] == 'H': table[team]['–í'] += 1; table[team]['–û'] += 3
                elif row['FTR'] == 'D': table[team]['–ù'] += 1; table[team]['–û'] += 1
                else: table[team]['–ü'] += 1
                table[team]['–†–ì'] += row['FTHG'] - row['FTAG']
            else:
                if row['FTR'] == 'A': table[team]['–í'] += 1; table[team]['–û'] += 3
                elif row['FTR'] == 'D': table[team]['–ù'] += 1; table[team]['–û'] += 1
                else: table[team]['–ü'] += 1
                table[team]['–†–ì'] += row['FTAG'] - row['FTHAG']
    return pd.DataFrame([
        {'–ö–æ–º–∞–Ω–¥–∞': t, **v} for t, v in sorted(table.items(), key=lambda x: -x[1]['–û'])
    ]).head(10)

# === –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π ===
def get_upcoming_matches(df, days=7):
    now = datetime.now()
    future = df[df['Date'] >= now].copy()
    future = future[future['Date'] <= now + timedelta(days=days)]
    future = future.sort_values('Date').head(15)
    future['–î–∞—Ç–∞'] = future['Date'].dt.strftime('%d.%m %H:%M')
    return future[['–î–∞—Ç–∞', 'HomeTeam', 'AwayTeam', 'League']]

# === –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞ ===
def predict_match(team1, team2, df):
    home_games = df[df['HomeTeam'] == team1]
    away_games = df[df['AwayTeam'] == team2]
    xG1 = home_games['FTHG'].mean() if len(home_games) > 0 else 1.5
    xG2 = away_games['FTAG'].mean() if len(away_games) > 0 else 1.2
    result = "HomeAs Winner" if xG1 > xG2 + 0.3 else "AwayAs Winner" if xG2 > xG1 + 0.3 else "Draw"
    return f"üîÆ {result}\nxG: {xG1:.2f} ‚Äî {xG2:.2f}"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def send_message(chat_id, text, parse_mode=None):
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        requests.post(BASE_URL + "sendMessage", data=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
def get_updates(offset=None):
    url = BASE_URL + "getUpdates"
    params = {"timeout": 30}
    if offset:
        params["offset"] = offset
    try:
        response = requests.get(url, params=params, timeout=35)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"ok": False}

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    offset = None
    df = load_data()

    while True:
        try:
            data = get_updates(offset)
            if data.get("ok") and data.get("result"):
                for item in data["result"]:
                    offset = item["update_id"] + 1
                    msg = item["message"]
                    chat_id = msg["chat"]["id"]
                    text = msg.get("text", "")

                    if text == "/start":
                        send_message(
                            chat_id,
                            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Football Analyst!\n\n"
                            "–ö–æ–º–∞–Ω–¥—ã:\n"
                            "‚Ä¢ /start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                            "‚Ä¢ /predict –ö–æ–º–∞–Ω–¥–∞1 –ö–æ–º–∞–Ω–¥–∞2 ‚Äî –ø—Ä–æ–≥–Ω–æ–∑\n"
                            "‚Ä¢ /table –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞ ‚Äî —Ç–∞–±–ª–∏—Ü–∞\n"
                            "‚Ä¢ /calendar ‚Äî –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏"
                        )

                    elif text.startswith("/predict"):
                        args = text.split()[1:]
                        if len(args) < 2:
                            send_message(chat_id, "‚ùå /predict Arsenal Man City")
                        else:
                            team1 = args[0]
                            team2 = " ".join(args[1:])
                            if df.empty:
                                send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                            else:
                                pred = predict_match(team1, team2, df)
                                send_message(chat_id, pred)

                    elif text.startswith("/table"):
                        args = text.split()[1:]
                        if not args:
                            league = "Premier League"
                        else:
                            league_input = " ".join(args).lower()
                            league_map = {
                                "–ø—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞": "Premier League",
                                "–±—É–Ω–¥–µ—Å–ª–∏–≥–∞": "Bundesliga",
                                "—Å–µ—Ä–∏—è": "Serie A",
                                "–ª–∏–≥–∞": "Ligue 1",
                                "–ª–∞ –ª–∏–≥–∞": "La Liga"
                            }
                            league = league_map.get(league_input, "Premier League")

                        if df.empty:
                            send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            table_df = get_league_table(df, league)
                            if table_df.empty:
                                send_message(chat_id, f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {league}")
                            else:
                                table_str = "\n".join([
                                    f"{i+1}. {row['–ö–æ–º–∞–Ω–¥–∞']} ‚Äî {row['–û']} –æ—á–∫–æ–≤"
                                    for i, row in table_df.iterrows()
                                ])
                                send_message(chat_id, f"üèÜ –¢–∞–±–ª–∏—Ü–∞: {league}\n\n{table_str}")

                    elif text == "/calendar":
                        if df.empty:
                            send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            matches = get_upcoming_matches(df)
                            if matches.empty:
                                send_message(chat_id, "üìÖ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π")
                            else:
                                cal_str = "\n".join([
                                    f"{row['–î–∞—Ç–∞']} ‚Äî {row['HomeTeam']} vs {row['AwayTeam']} ({row['League']})"
                                    for _, row in matches.iterrows()
                                ])
                                send_message(chat_id, f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏:\n\n{cal_str}")

            time.sleep(1)

        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()
EOFcat > /workspaces/football-ai/bot.py << 'EOF'
# bot.py
from config import TOKEN, MAIN_CHAT_ID
import requests
import time
import logging
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏–≥ ===
def load_data():
    leagues = {
        'E0': 'Premier League',
        'D1': 'Bundesliga',
        'I1': 'Serie A',
        'F1': 'Ligue 1',
        'SP1': 'La Liga'
    }
    all_matches = []

    for code, name in leagues.items():
        url = f"https://www.football-data.co.uk/mmz4281/2324/{code}.csv"
        try:
            response = requests.get(url, timeout=10)
            df = pd.read_csv(StringIO(response.text))
            df['League'] = name
            df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')
            all_matches.append(df)
            logger.info(f"‚úÖ {name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå {name}: {e}")
    
    return pd.concat(all_matches, ignore_index=True) if all_matches else pd.DataFrame()

# === –¢–∞–±–ª–∏—Ü–∞ –ª–∏–≥–∏ ===
def get_league_table(df, league_name):
    league_df = df[df['League'] == league_name]
    table = {}
    for _, row in league_df.iterrows():
        h, a = row['HomeTeam'], row['AwayTeam']
        for team, is_home in [(h, True), (a, False)]:
            if team not in table:
                table[team] = {'–ò': 0, '–í': 0, '–ù': 0, '–ü': 0, '–†–ì': 0, '–û': 0}
            table[team]['–ò'] += 1
            if is_home:
                if row['FTR'] == 'H': table[team]['–í'] += 1; table[team]['–û'] += 3
                elif row['FTR'] == 'D': table[team]['–ù'] += 1; table[team]['–û'] += 1
                else: table[team]['–ü'] += 1
                table[team]['–†–ì'] += row['FTHG'] - row['FTAG']
            else:
                if row['FTR'] == 'A': table[team]['–í'] += 1; table[team]['–û'] += 3
                elif row['FTR'] == 'D': table[team]['–ù'] += 1; table[team]['–û'] += 1
                else: table[team]['–ü'] += 1
                table[team]['–†–ì'] += row['FTAG'] - row['FTHAG']
    return pd.DataFrame([
        {'–ö–æ–º–∞–Ω–¥–∞': t, **v} for t, v in sorted(table.items(), key=lambda x: -x[1]['–û'])
    ]).head(10)

# === –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π ===
def get_upcoming_matches(df, days=7):
    now = datetime.now()
    future = df[df['Date'] >= now].copy()
    future = future[future['Date'] <= now + timedelta(days=days)]
    future = future.sort_values('Date').head(15)
    future['–î–∞—Ç–∞'] = future['Date'].dt.strftime('%d.%m %H:%M')
    return future[['–î–∞—Ç–∞', 'HomeTeam', 'AwayTeam', 'League']]

# === –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞ ===
def predict_match(team1, team2, df):
    home_games = df[df['HomeTeam'] == team1]
    away_games = df[df['AwayTeam'] == team2]
    xG1 = home_games['FTHG'].mean() if len(home_games) > 0 else 1.5
    xG2 = away_games['FTAG'].mean() if len(away_games) > 0 else 1.2
    result = "HomeAs Winner" if xG1 > xG2 + 0.3 else "AwayAs Winner" if xG2 > xG1 + 0.3 else "Draw"
    return f"üîÆ {result}\nxG: {xG1:.2f} ‚Äî {xG2:.2f}"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def send_message(chat_id, text, parse_mode=None):
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        requests.post(BASE_URL + "sendMessage", data=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
def get_updates(offset=None):
    url = BASE_URL + "getUpdates"
    params = {"timeout": 30}
    if offset:
        params["offset"] = offset
    try:
        response = requests.get(url, params=params, timeout=35)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"ok": False}

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    offset = None
    df = load_data()

    while True:
        try:
            data = get_updates(offset)
            if data.get("ok") and data.get("result"):
                for item in data["result"]:
                    offset = item["update_id"] + 1
                    msg = item["message"]
                    chat_id = msg["chat"]["id"]
                    text = msg.get("text", "")

                    if text == "/start":
                        send_message(
                            chat_id,
                            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Football Analyst!\n\n"
                            "–ö–æ–º–∞–Ω–¥—ã:\n"
                            "‚Ä¢ /start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                            "‚Ä¢ /predict –ö–æ–º–∞–Ω–¥–∞1 –ö–æ–º–∞–Ω–¥–∞2 ‚Äî –ø—Ä–æ–≥–Ω–æ–∑\n"
                            "‚Ä¢ /table –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞ ‚Äî —Ç–∞–±–ª–∏—Ü–∞\n"
                            "‚Ä¢ /calendar ‚Äî –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏"
                        )

                    elif text.startswith("/predict"):
                        args = text.split()[1:]
                        if len(args) < 2:
                            send_message(chat_id, "‚ùå /predict Arsenal Man City")
                        else:
                            team1 = args[0]
                            team2 = " ".join(args[1:])
                            if df.empty:
                                send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                            else:
                                pred = predict_match(team1, team2, df)
                                send_message(chat_id, pred)

                    elif text.startswith("/table"):
                        args = text.split()[1:]
                        if not args:
                            league = "Premier League"
                        else:
                            league_input = " ".join(args).lower()
                            league_map = {
                                "–ø—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞": "Premier League",
                                "–±—É–Ω–¥–µ—Å–ª–∏–≥–∞": "Bundesliga",
                                "—Å–µ—Ä–∏—è": "Serie A",
                                "–ª–∏–≥–∞": "Ligue 1",
                                "–ª–∞ –ª–∏–≥–∞": "La Liga"
                            }
                            league = league_map.get(league_input, "Premier League")

                        if df.empty:
                            send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            table_df = get_league_table(df, league)
                            if table_df.empty:
                                send_message(chat_id, f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {league}")
                            else:
                                table_str = "\n".join([
                                    f"{i+1}. {row['–ö–æ–º–∞–Ω–¥–∞']} ‚Äî {row['–û']} –æ—á–∫–æ–≤"
                                    for i, row in table_df.iterrows()
                                ])
                                send_message(chat_id, f"üèÜ –¢–∞–±–ª–∏—Ü–∞: {league}\n\n{table_str}")

                    elif text == "/calendar":
                        if df.empty:
                            send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            matches = get_upcoming_matches(df)
                            if matches.empty:
                                send_message(chat_id, "üìÖ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π")
                            else:
                                cal_str = "\n".join([
                                    f"{row['–î–∞—Ç–∞']} ‚Äî {row['HomeTeam']} vs {row['AwayTeam']} ({row['League']})"
                                    for _, row in matches.iterrows()
                                ])
                                send_message(chat_id, f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏:\n\n{cal_str}")

            time.sleep(1)

        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()
