# bot.py
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading
import json
import requests
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta
import logging
import time
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥
TOKEN = "8304903389:AAGRyWP4Ez97aoA-yLTYzYLQHuKbutTfcy4"
MAIN_CHAT_ID = "8431596511"
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

# === –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
PUSH_SUBSCRIBERS_FILE = "push_subscribers.json"
if not os.path.exists(PUSH_SUBSCRIBERS_FILE):
    with open(PUSH_SUBSCRIBERS_FILE, "w") as f:
        json.dump([MAIN_CHAT_ID], f)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≥–ª–∞–≤–Ω—ã–π —á–∞—Ç

def load_push_subscribers():
    try:
        with open(PUSH_SUBSCRIBERS_FILE, "r") as f:
            return json.load(f)
    except:
        return [MAIN_CHAT_ID]

def add_push_subscriber(chat_id):
    subs = load_push_subscribers()
    if str(chat_id) not in [str(c) for c in subs]:
        subs.append(str(chat_id))
        with open(PUSH_SUBSCRIBERS_FILE, "w") as f:
            json.dump(subs, f)
        return True
    return False

# === Live-–º–∞—Ç—á–∏ (—Å–∏–º—É–ª—è—Ü–∏—è) ===
def get_live_matches():
    return [
        {
            'home': 'Arsenal',
            'away': 'Man City',
            'score': '1:1',
            'minute': 67,
            'possession': '52% - 48%',
            'shots': '12 - 9',
            'shots_on_target': '5 - 4',
            'xG': '1.8 - 1.5',
            'danger_attacks': '65 - 58',
            'yellow_cards': '2 - 3',
            'red_cards': '0 - 1',
            'status': 'LIVE',
            'events': []  # –°–æ–±—ã—Ç–∏—è: –≥–æ–ª—ã, –∫–∞—Ä—Ç–æ—á–∫–∏
        }
    ]

# === –ü—Ä–æ–≥–Ω–æ–∑ –≤ live-–º–∞—Ç—á–µ ===
def predict_live_match(match):
    xG1 = float(match['xG'].split(' - ')[0])
    xG2 = float(match['xG'].split(' - ')[1])
    score1, score2 = map(int, match['score'].split(':'))
    time_left = 90 - match['minute']

    adj_xG1 = xG1 + (score1 * 0.5)
    adj_xG2 = xG2 + (score2 * 0.5)

    total_xG = adj_xG1 + adj_xG2
    total_pred = "Over 2.5" if total_xG > 3.0 else "Under 2.5"

    if adj_xG1 > adj_xG2 + 0.5:
        winner = match['home']
        confidence = "–í—ã—Å–æ–∫–∞—è"
    elif adj_xG2 > adj_xG1 + 0.5:
        winner = match['away']
        confidence = "–í—ã—Å–æ–∫–∞—è"
    else:
        winner = "–ù–∏—á—å—è"
        confidence = "–°—Ä–µ–¥–Ω—è—è"

    return {
        'winner': winner,
        'confidence': confidence,
        'total_pred': total_pred,
        'adj_xG': f"{adj_xG1:.2f} ‚Äî {adj_xG2:.2f}"
    }

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def send_message(chat_id, text, parse_mode=None):
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        requests.post(BASE_URL + "sendMessage", data=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
def get_updates(offset=None):
    url = BASE_URL + "getUpdates"
    params = {"timeout": 30}
    if offset:
        params["offset"] = offset
    try:
        response = requests.get(url, params=params, timeout=35)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"ok": False}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π (–¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏) ===
def generate_random_event(match):
    import random
    events = ["goal", "yellow", "red", "penalty", "shot_on_target"]
    if random.random() < 0.05:  # 5% —à–∞–Ω—Å —Å–æ–±—ã—Ç–∏—è
        return random.choice(events)
    return None

# === –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
def send_push_notification(message):
    subscribers = load_push_subscribers()
    for chat_id in subscribers:
        send_message(chat_id, message, parse_mode='Markdown')
        logger.info(f"üîî Push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ live-–º–∞—Ç—á–µ–π –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
def check_live_matches_with_push():
    matches = get_live_matches()
    for match in matches:
        event = generate_random_event(match)
        message = None

        if event == "goal":
            team = match['home'] if random.choice([True, False]) else match['away']
            match['score'] = f"{eval(match['score'].split(':')[0]) + 1}:{match['score'].split(':')[1]}" if team == match['home'] else f"{match['score'].split(':')[0]}:{eval(match['score'].split(':')[1]) + 1}"
            message = f"‚öΩ *–ì–û–õ!* {team} –∑–∞–±–∏–ª! –°—á—ë—Ç: {match['score']} (–º–∏–Ω: {match['minute']})"
        elif event == "yellow":
            team = match['home'] if random.choice([True, False]) else match['away']
            message = f"üü® *–ñ–Å–õ–¢–ê–Ø –ö–ê–†–¢–û–ß–ö–ê* –¥–ª—è –∏–≥—Ä–æ–∫–∞ {team} (–º–∏–Ω: {match['minute']})"
        elif event == "red":
            team = match['home'] if random.choice([True, False]) else match['away']
            message = f"üü• *–ö–†–ê–°–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê* –¥–ª—è –∏–≥—Ä–æ–∫–∞ {team}! {team} –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –º–µ–Ω—å—à–∏–Ω—Å—Ç–≤–µ (–º–∏–Ω: {match['minute']})"
        elif event == "penalty":
            team = match['home'] if random.choice([True, False]) else match['away']
            message = f"üéØ *–ü–ï–ù–ê–õ–¨–¢–ò* –¥–ª—è {team}! (–º–∏–Ω: {match['minute']})"
        elif event == "shot_on_target":
            team = match['home'] if random.choice([True, False]) else match['away']
            message = f"üí• *–£–î–ê–† –í –°–¢–û–†! {team}* —Å–æ–∑–¥–∞—ë—Ç –º–æ–º–µ–Ω—Ç! (–º–∏–Ω: {match['minute']})"

        if message:
            send_push_notification(message)

        # –ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        if datetime.now().second % 30 == 0:
            pred = predict_live_match(match)
            message = (
                f"üî¥ *LIVE: {match['home']} vs {match['away']}*\n"
                f"‚è±Ô∏è {match['minute']}' | –°—á—ë—Ç: {match['score']}\n"
                f"üìä –í–ª–∞–¥–µ–Ω–∏–µ: {match['possession']}\n"
                f"üéØ xG: {match['xG']}\n"
                f"üî• –ü—Ä–æ–≥–Ω–æ–∑: *{pred['winner']}* ({pred['confidence']})\n"
                f"üìà –¢–æ—Ç–∞–ª: {pred['total_pred']}"
            )
            send_push_notification(message)

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ===
def run_bot():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    offset = None
    subscribers = load_push_subscribers()

    while True:
        try:
            data = get_updates(offset)
            if data.get("ok") and data.get("result"):
                for item in data["result"]:
                    offset = item["update_id"] + 1
                    msg = item["message"]
                    chat_id = msg["chat"]["id"]
                    text = msg.get("text", "")

                    if text == "/start":
                        add_push_subscriber(chat_id)
                        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

                    elif text == "/live":
                        matches = get_live_matches()
                        for match in matches:
                            pred = predict_live_match(match)
                            message = (
                                f"üî¥ *LIVE: {match['home']} vs {match['away']}*\n"
                                f"‚è±Ô∏è {match['minute']}' | –°—á—ë—Ç: {match['score']}\n"
                                f"üìä –í–ª–∞–¥–µ–Ω–∏–µ: {match['possession']}\n"
                                f"üéØ xG: {match['xG']}\n"
                                f"üî• –ü—Ä–æ–≥–Ω–æ–∑: *{pred['winner']}* ({pred['confidence']})\n"
                                f"üìà –¢–æ—Ç–∞–ª: {pred['total_pred']}"
                            )
                            send_message(chat_id, message, parse_mode='Markdown')

                    elif text == "/subscribe_push":
                        if add_push_subscriber(chat_id):
                            send_message(chat_id, "‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö!")
                        else:
                            send_message(chat_id, "‚ùå –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
            check_live_matches_with_push()
            time.sleep(15)

        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä ===
class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.end_headers()
        self.wfile.write("<h1>AI Football Analyst ‚Äî LIVE –∏ Push –∞–∫—Ç–∏–≤–Ω—ã</h1>".encode("utf-8"))

def run_web():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('', port), Handler)
    logger.info(f"üåç –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    web_thread = threading.Thread(target=run_web, daemon=True)
    web_thread.start()
    run_bot()
