# bot.py
# üèÜ AI Football Analyst Pro ‚Äî –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å ROI
import requests
import time
import logging
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta
from config import TOKEN, MAIN_CHAT_ID

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    url = "https://www.football-data.co.uk/mmz4281/2324/E0.csv"
    try:
        df = pd.read_csv(StringIO(requests.get(url, timeout=10).text))
        df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')
        df['DateTime'] = df['Date']

        # –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á —á–µ—Ä–µ–∑ 1 —á–∞—Å 10 –º–∏–Ω—É—Ç
        test_match = df.iloc[0].copy()
        test_match['DateTime'] = datetime.now() + timedelta(hours=1, minutes=10)
        test_match['B365H'] = 1.80
        test_match['B365D'] = 3.60
        test_match['B365A'] = 4.50
        return pd.DataFrame([test_match])
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return pd.DataFrame()

# === –ü—Ä–æ–≥–Ω–æ–∑ AI ===
def predict_match(team1, team2):
    return {
        'probs': {'H': 0.55, 'D': 0.25, 'A': 0.20},
        'result': '–ü–æ–±–µ–¥–∞ Arsenal',
        'score': '1.8 : 1.2',
        'xG1': 1.8, 'xG2': 1.2
    }

# === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±—É–∫–º–µ–∫–µ—Ä–∞–º–∏ ===
def compare_with_bookmaker(ai_probs, b365_h, b365_d, b365_a):
    bookie_probs = {k: 1/v for k, v in {'H': b365_h, 'D': b365_d, 'A': b365_a}.items()}
    total = sum(bookie_probs.values())
    bookie_probs = {k: v/total for k, v in bookie_probs.items()}
    edge = {k: ai_probs[k] - bookie_probs[k] for k in ai_probs}
    return bookie_probs, edge

# === –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ ROI ===
class ROI_Tracker:
    def __init__(self):
        self.total_bet = 0
        self.profit = 0
        self.wins = 0
        self.total = 0

    def place_bet(self, match, ai_probs, b365_h, b365_d, b365_a, amount=10):
        _, edge = compare_with_bookmaker(ai_probs, b365_h, b365_d, b365_a)
        signals = [k for k, v in edge.items() if v > 0.10]

        if not signals:
            return

        # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–≤–µ—Å
        bet_on = max(signals, key=lambda x: edge[x])
        odds = {'H': b365_h, 'D': b365_d, 'A': b365_a}[bet_on]
        outcome = match['FTR']
        win = (bet_on == 'H' and outcome == 'H') or \
              (bet_on == 'D' and outcome == 'D') or \
              (bet_on == 'A' and outcome == 'A')

        self.total += 1
        self.total_bet += amount
        if win:
            self.profit += amount * (odds - 1)
            self.wins += 1
        else:
            self.profit -= amount

    def report(self):
        accuracy = self.wins / self.total if self.total else 0
        roi = (self.profit / self.total_bet) * 100 if self.total_bet else 0
        return {
            'total': self.total,
            'profit': self.profit,
            'accuracy': accuracy,
            'roi': roi
        }

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def send_message(chat_id, text, parse_mode=None):
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        requests.post(BASE_URL + "sendMessage", data=payload, timeout=10)
    except: pass

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π ===
def check_upcoming_matches(df, context_chat_id, roi_tracker):
    now = datetime.now()
    start = now + timedelta(minutes=50)
    end = now + timedelta(minutes=70)

    upcoming = df[
        (df['DateTime'] > start) & 
        (df['DateTime'] <= end)
    ]

    for _, match in upcoming.iterrows():
        home = match['HomeTeam']
        away = match['AwayTeam']
        pred = predict_match(home, away)
        ai_probs = pred['probs']

        b365_h = match.get('B365H', 1.80)
        b365_d = match.get('B365D', 3.60)
        b365_a = match.get('B365A', 4.50)

        bookie_probs, edge = compare_with_bookmaker(ai_probs, b365_h, b365_d, b365_a)
        signals = [k for k, v in edge.items() if v > 0.10]
        has_signal = len(signals) > 0

        # –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if has_signal:
            roi_tracker.place_bet(match, ai_probs, b365_h, b365_d, b365_a)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message = (
            f"‚è∞ *–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á*\n"
            f"{home} ‚öîÔ∏è {away}\n\n"
            f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ AI*:\n"
            f"‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: *{pred['result']}*\n"
            f"‚Ä¢ xG: {pred['xG1']:.2f} ‚Äî {pred['xG2']:.2f}\n\n"
            f"üìò *–ë—É–∫–º–µ–∫–µ—Ä (B365)*:\n"
            f"‚Ä¢ H: {b365_h} ({bookie_probs['H']:.1%})\n"
            f"‚Ä¢ D: {b365_d} ({bookie_probs['D']:.1%})\n"
            f"‚Ä¢ A: {b365_a} ({bookie_probs['A']:.1%})\n\n"
            f"üìä *–ü–µ—Ä–µ–≤–µ—Å AI*:\n"
            f"‚Ä¢ H: {edge['H']:+.1%}\n"
            f"‚Ä¢ D: {edge['D']:+.1%}\n"
            f"‚Ä¢ A: {edge['A']:+.1%}"
        )

        if has_signal:
            signal_str = " | ".join([{'H': home, 'D': 'Draw', 'A': away}[s] for s in signals])
            message += f"\n\nüéØ *–°–ò–ì–ù–ê–õ –ù–ê –°–¢–ê–í–ö–£!* üî•\n–í—ã—Å–æ–∫–∏–π –ø–µ—Ä–µ–≤–µ—Å: {signal_str}"

        send_message(context_chat_id, message, parse_mode='Markdown')
        logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ROI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ===
def main():
    logger.info("‚úÖ AI Football Analyst Pro –∑–∞–ø—É—â–µ–Ω")
    df = load_data()
    roi_tracker = ROI_Tracker()

    if df.empty:
        logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    while True:
        try:
            check_upcoming_matches(df, MAIN_CHAT_ID, roi_tracker)
            time.sleep(120)
        except KeyboardInterrupt:
            # –ü–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π ‚Äî –ø–æ–∫–∞–∂–µ–º –æ—Ç—á—ë—Ç
            report = roi_tracker.report()
            summary = (
                f"üìä *–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç*\n"
                f"‚Ä¢ –°—Ç–∞–≤–æ–∫ —Å–¥–µ–ª–∞–Ω–æ: {report['total']}\n"
                f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {report['profit']:.1f} —É.–µ.\n"
                f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {report['accuracy']:.1%}\n"
                f"‚Ä¢ ROI: {report['roi']:.1f}%"
            )
            send_message(MAIN_CHAT_ID, summary, parse_mode='Markdown')
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            break
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()