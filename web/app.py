# web/app.py
import streamlit as st
import pandas as pd
import requests
import plotly.express as px
from io import StringIO
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="‚öΩ AI Football Analyst Pro",
    page_icon="‚öΩ",
    layout="wide"
)

# –°—Ç–∏–ª—å
st.markdown("""
<style>
    .big-font {
        font-size:20px !important;
        font-weight: bold;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

st.title("üéØ AI Football Analyst Pro ‚Äî –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ—É—Ç–±–æ–ª–∞")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    url = "https://www.football-data.co.uk/mmz4281/2324/E0.csv"
    try:
        df = pd.read_csv(StringIO(requests.get(url).text))
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce', dayfirst=True)
        df['League'] = 'Premier League'
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –ê–ü–õ 2023/24 –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return df
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return pd.DataFrame()

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.cache_data.clear()
    st.rerun()

df = load_data()
if df.empty:
    st.stop()

# === –í–∫–ª–∞–¥–∫–∏ ===
tab1, tab2, tab3, tab4 = st.tabs([
    "üîÆ –ü—Ä–æ–≥–Ω–æ–∑", 
    "üèÜ –¢–∞–±–ª–∏—Ü–∞", 
    "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", 
    "üìä ROI & –°–∏–≥–Ω–∞–ª—ã"
])

# === 1. –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞ ===
with tab1:
    st.header("–°–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑")

    col1, col2 = st.columns(2)
    with col1:
        team1 = st.selectbox("–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞", df['HomeTeam'].unique(), key="home")
    with col2:
        team2 = st.selectbox("–ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞", df['AwayTeam'].unique(), key="away")

    if st.button("üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å"):
        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å xG
        home_stats = df[df['HomeTeam'] == team1]
        away_stats = df[df['AwayTeam'] == team2]

        xG1 = round(home_stats['FTHG'].mean() if len(home_stats) > 0 else 1.5, 2)
        xG2 = round(away_stats['FTAG'].mean() if len(away_stats) > 0 else 1.2, 2)

        if xG1 > xG2 + 0.3:
            result = f"–ü–æ–±–µ–¥–∞ {team1}"
            color = "green"
        elif xG2 > xG1 + 0.3:
            result = f"–ü–æ–±–µ–¥–∞ {team2}"
            color = "green"
        else:
            result = "–ù–∏—á—å—è"
            color = "orange"

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        st.markdown(f"<p class='big-font' style='color:{color}'>–ü—Ä–æ–≥–Ω–æ–∑: {result}</p>", unsafe_allow_html=True)

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã (xG)", f"{xG1} : {xG2}")
        with col2:
            st.metric("–°—á—ë—Ç", f"{round(xG1)} : {round(xG2)}")

        # –ì—Ä–∞—Ñ–∏–∫
        xg_data = pd.DataFrame({
            '–ö–æ–º–∞–Ω–¥–∞': [team1, team2],
            'xG': [xG1, xG2]
        })
        fig = px.bar(xg_data, x='–ö–æ–º–∞–Ω–¥–∞', y='xG', title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ xG", color='–ö–æ–º–∞–Ω–¥–∞')
        st.plotly_chart(fig, use_container_width=True)

# === 2. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–≥–∏ ===
with tab2:
    st.header("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ê–ü–õ")

    def get_table(df):
        table = {}
        for _, row in df.iterrows():
            h, a = row['HomeTeam'], row['AwayTeam']
            for team, is_home in [(h, True), (a, False)]:
                if team not in table:
                    table[team] = {'–ò': 0, '–í': 0, '–ù': 0, '–ü': 0, '–†–ì': 0, '–û': 0}
                table[team]['–ò'] += 1
                if is_home:
                    if row['FTR'] == 'H':
                        table[team]['–í'] += 1
                        table[team]['–û'] += 3
                    elif row['FTR'] == 'D':
                        table[team]['–ù'] += 1
                        table[team]['–û'] += 1
                    else:
                        table[team]['–ü'] += 1
                    table[team]['–†–ì'] += row['FTHG'] - row['FTAG']
                else:
                    if row['FTR'] == 'A':
                        table[team]['–í'] += 1
                        table[team]['–û'] += 3
                    elif row['FTR'] == 'D':
                        table[team]['–ù'] += 1
                        table[team]['–û'] += 1
                    else:
                        table[team]['–ü'] += 1
                    table[team]['–†–ì'] += row['FTAG'] - row['FTHG']
        return pd.DataFrame([
            {'–ö–æ–º–∞–Ω–¥–∞': t, **v} for t, v in sorted(table.items(), key=lambda x: -x[1]['–û'])
        ])

    league_table = get_table(df)
    st.dataframe(league_table, use_container_width=True)

# === 3. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π ===
with tab3:
    st.header("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏")

    if 'Date' in df.columns:
        now = pd.Timestamp.now()
        future = df[df['Date'] >= now].copy()
        future = future[['Date', 'HomeTeam', 'AwayTeam', 'League']].head(15)
        future['Date'] = future['Date'].dt.strftime('%d.%m %H:%M')
        future = future.rename(columns={
            'Date': '–î–∞—Ç–∞',
            'HomeTeam': '–î–æ–º–∞',
            'AwayTeam': '–í –≥–æ—Å—Ç—è—Ö',
            'League': '–õ–∏–≥–∞'
        })
        st.dataframe(future, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–∞—Ö")

# === 4. ROI –∏ —Å–∏–≥–Ω–∞–ª—ã ===
with tab4:
    st.header("üìä –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã")

    # –°–∏–º—É–ª—è—Ü–∏—è ROI
    total_bets = 8
    wins = 5
    profit = 22.4
    accuracy = wins / total_bets
    roi = (profit / (total_bets * 10)) * 100

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("–°—Ç–∞–≤–æ–∫", total_bets)
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1%}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("–ü—Ä–∏–±—ã–ª—å", f"{profit} —É.–µ.")
        st.markdown('</div>', unsafe_allow_html=True)

    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("ROI", f"{roi:.1f}%")
        st.markdown('</div>', unsafe_allow_html=True)

    # –°–∏–≥–Ω–∞–ª—ã
    st.subheader("üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã")
    signals = pd.DataFrame([
        {"–ú–∞—Ç—á": "Arsenal vs Man City", "–°–∏–≥–Ω–∞–ª": "–ü–æ–±–µ–¥–∞ Arsenal", "Edge": "+12%", "–î–∞—Ç–∞": "10.08"},
        {"–ú–∞—Ç—á": "Liverpool vs Chelsea", "–°–∏–≥–Ω–∞–ª": "–ù–∏—á—å—è", "Edge": "+15%", "–î–∞—Ç–∞": "11.08"},
    ])
    st.dataframe(signals, use_container_width=True)